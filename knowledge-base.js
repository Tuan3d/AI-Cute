// ================================
// Knowledge Base File
// File: knowledge-base.js
// ================================
// H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
// 1. Th√™m ki·∫øn th·ª©c b·ªï sung v√†o ph·∫ßn CONTENT
// 2. C√≥ th·ªÉ th√™m nhi·ªÅu ch·ªß ƒë·ªÅ kh√°c nhau
// 3. AI s·∫Ω s·ª≠ d·ª•ng th√¥ng tin n√†y ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c h∆°n
// ================================

const KNOWLEDGE_BASE = {
    // Ki·∫øn th·ª©c ch√≠nh - s·∫Ω ƒë∆∞·ª£c th√™m v√†o m·ªçi c√¢u h·ªèi
    CONTENT: `
    === KI·∫æN TH·ª®C B·ªî SUNG CHO AI CUTE ===
    
    ü§ñ TH√îNG TIN C∆† BAN:
    - T√™n: AI Cute
    - Phi√™n b·∫£n: ƒê∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông t·ª´ version.js
    - T·∫°o b·ªüi: [T√™n c·ªßa b·∫°n]
    - Ch·ª©c nƒÉng: Chatbot th√¥ng minh v·ªõi Gemini API
    
    üåü T√çNH NƒÇNG ƒê·∫∑C BI·ªÜT:
    - Deep Think Mode: Suy lu·∫≠n k·ªπ l∆∞·ª°ng tr∆∞·ªõc khi tr·∫£ l·ªùi
    - Multi-API Support: T·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi API khi g·∫∑p l·ªói  
    - Code Display: Hi·ªÉn th·ªã code ƒë·∫πp v·ªõi n√∫t sao ch√©p
    - Knowledge Base: T√≠ch h·ª£p ki·∫øn th·ª©c b·ªï sung t·ª´ file n√†y
    
    üí° C√ÅCH TRUY C·∫¨P:
    - Website: [URL website c·ªßa b·∫°n]
    - GitHub: [Link GitHub repo c·ªßa b·∫°n]
    - Contact: [Th√¥ng tin li√™n h·ªá]
    
    üìö KI·∫æN TH·ª®C CHUY√äN M√îN:
    
    == L·∫≠p tr√¨nh ==
    - H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ: JavaScript, Python, Java, C++, etc.
    - Framework ph·ªï bi·∫øn: React, Vue, Angular, Django, Flask
    - Database: MySQL, PostgreSQL, MongoDB, Redis
    - DevOps: Docker, Kubernetes, CI/CD, AWS, GCP
    
    == AI & Machine Learning ==
    - Deep Learning frameworks: TensorFlow, PyTorch, Keras
    - NLP libraries: spaCy, NLTK, Transformers
    - Computer Vision: OpenCV, PIL, scikit-image  
    - MLOps: MLflow, Kubeflow, Weights & Biases
    
    == Web Development ==
    - Frontend: HTML5, CSS3, JavaScript ES6+, TypeScript
    - CSS Frameworks: Tailwind CSS, Bootstrap, Material-UI
    - Backend: Node.js, Express, Fastify, Nest.js
    - API: REST, GraphQL, WebSocket, gRPC
    
    == Mobile Development ==
    - React Native, Flutter, Ionic
    - Native: Swift (iOS), Kotlin/Java (Android)
    - Cross-platform tools v√† best practices
    
    == Data Science ==
    - Python libraries: Pandas, NumPy, Matplotlib, Seaborn
    - Statistical analysis: SciPy, Statsmodels
    - Visualization: Plotly, Bokeh, D3.js
    - Big Data: Spark, Hadoop, Kafka
    
    ‚ö° QUY T·∫ÆC TR·∫¢ L·ªúI:
    1. Lu√¥n th√¢n thi·ªán v√† h·ªØu √≠ch
    2. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát tr·ª´ khi ƒë∆∞·ª£c y√™u c·∫ßu kh√°c
    3. Cung c·∫•p v√≠ d·ª• th·ª±c t·∫ø khi c√≥ th·ªÉ
    4. Gi·∫£i th√≠ch r√µ r√†ng, d·ªÖ hi·ªÉu
    5. Th·ª´a nh·∫≠n khi kh√¥ng bi·∫øt v√† ƒë·ªÅ xu·∫•t t√¨m hi·ªÉu th√™m
    
    üîÑ C·∫¨P NH·∫¨T:
    - File n√†y ƒë∆∞·ª£c c·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n
    - Ki·ªÉm tra version ƒë·ªÉ bi·∫øt th√¥ng tin m·ªõi nh·∫•t
    - ƒê√≥ng g√≥p √Ω ki·∫øn ƒë·ªÉ c·∫£i thi·ªán AI Cute
    `,
    
    // Ki·∫øn th·ª©c theo ch·ªß ƒë·ªÅ c·ª• th·ªÉ
    TOPICS: {
        programming: {
            languages: ["JavaScript", "Python", "Java", "C++", "Go", "Rust"],
            frameworks: ["React", "Vue", "Angular", "Django", "Flask", "Spring"],
            tools: ["Git", "Docker", "Kubernetes", "Jenkins", "VS Code"]
        },
        
        ai_ml: {
            frameworks: ["TensorFlow", "PyTorch", "Keras", "Scikit-learn"],
            concepts: ["Neural Networks", "Deep Learning", "NLP", "Computer Vision"],
            tools: ["Jupyter", "Google Colab", "Weights & Biases", "MLflow"]
        },
        
        web_dev: {
            frontend: ["HTML5", "CSS3", "JavaScript", "TypeScript", "Sass"],
            backend: ["Node.js", "Express", "FastAPI", "Django", "Ruby on Rails"],
            databases: ["MySQL", "PostgreSQL", "MongoDB", "Redis", "SQLite"]
        }
    },
    
    // Prompt templates cho c√°c t√¨nh hu·ªëng kh√°c nhau
    PROMPTS: {
        coding_help: "T√¥i s·∫Ω gi√∫p b·∫°n v·ªõi v·∫•n ƒë·ªÅ l·∫≠p tr√¨nh n√†y. H√£y ƒë·ªÉ t√¥i ph√¢n t√≠ch v√† ƒë∆∞a ra gi·∫£i ph√°p t·ªët nh·∫•t:",
        explain_concept: "ƒê·ªÉ gi·∫£i th√≠ch kh√°i ni·ªám n√†y m·ªôt c√°ch d·ªÖ hi·ªÉu, t√¥i s·∫Ω:",
        troubleshoot: "ƒê·ªÉ kh·∫Øc ph·ª•c s·ª± c·ªë n√†y, ch√∫ng ta c·∫ßn ki·ªÉm tra:",
        best_practices: "D·ª±a tr√™n kinh nghi·ªám v√† best practices, t√¥i khuy√™n b·∫°n:"
    }
};

// H√†m l·∫•y ki·∫øn th·ª©c theo ch·ªß ƒë·ªÅ
function getTopicKnowledge(topic) {
    return KNOWLEDGE_BASE.TOPICS[topic] || null;
}

// H√†m l·∫•y prompt template
function getPromptTemplate(type) {
    return KNOWLEDGE_BASE.PROMPTS[type] || "";
}

// H√†m t√¨m ki·∫øm trong knowledge base
function searchKnowledge(query) {
    const content = KNOWLEDGE_BASE.CONTENT.toLowerCase();
    const queryLower = query.toLowerCase();
    
    // T√¨m ki·∫øm ƒë∆°n gi·∫£n
    if (content.includes(queryLower)) {
        return "T√¥i t√¨m th·∫•y th√¥ng tin li√™n quan trong knowledge base c·ªßa t√¥i.";
    }
    
    return null;
}

// Export ƒë·ªÉ s·ª≠ d·ª•ng
if (typeof window !== 'undefined') {
    window.KNOWLEDGE_BASE = KNOWLEDGE_BASE;
    window.getTopicKnowledge = getTopicKnowledge;
    window.getPromptTemplate = getPromptTemplate;
    window.searchKnowledge = searchKnowledge;
}
