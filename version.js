// ================================
// Version Management File  
// File: version.js
// ================================
// H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
// 1. C·∫≠p nh·∫≠t VERSION khi c√≥ thay ƒë·ªïi
// 2. C·∫≠p nh·∫≠t LAST_UPDATE v·ªõi ng√†y hi·ªán t·∫°i
// 3. Th√™m th√¥ng tin v√†o CHANGELOG
// 4. Ng∆∞·ªùi d√πng s·∫Ω th·∫•y th√¥ng b√°o c·∫≠p nh·∫≠t t·ª± ƒë·ªông
// ================================

const VERSION_INFO = {
    // Phi√™n b·∫£n hi·ªán t·∫°i (Semantic Versioning)
    VERSION: "1.2.0",
    
    // Ng√†y c·∫≠p nh·∫≠t cu·ªëi (DD/MM/YYYY)
    LAST_UPDATE: "05/06/2025",
    
    // Th√¥ng tin build
    BUILD_NUMBER: "20250605001",
    BUILD_DATE: "2025-06-05T10:30:00Z",
    
    // T√≠nh nƒÉng m·ªõi trong phi√™n b·∫£n n√†y
    NEW_FEATURES: [
        "‚ú® Multi-API support v·ªõi fallback t·ª± ƒë·ªông",
        "üß† Deep Think mode v·ªõi qu√° tr√¨nh suy lu·∫≠n",
        "üìö Knowledge base t√≠ch h·ª£p t·ª´ file ri√™ng",
        "üé® Giao di·ªán t·ªëi chuy√™n nghi·ªáp",
        "üìã Copy code v·ªõi m·ªôt click",
        "üîÑ Auto-retry khi API th·∫•t b·∫°i"
    ],
    
    // L·ªãch s·ª≠ thay ƒë·ªïi
    CHANGELOG: {
        "1.2.0": {
            date: "05/06/2025",
            changes: [
                "Th√™m h·ªá th·ªëng multi-API v·ªõi fallback",
                "T√≠ch h·ª£p Deep Think mode",
                "Th√™m knowledge base t·ª´ file ri√™ng", 
                "C·∫£i thi·ªán UI/UX v·ªõi dark theme",
                "Th√™m t√≠nh nƒÉng copy code"
            ]
        },
        "1.1.0": {
            date: "04/06/2025", 
            changes: [
                "Th√™m Deep Think reasoning",
                "C·∫£i thi·ªán hi·ªÉn th·ªã code blocks",
                "T·ªëi ∆∞u h√≥a giao di·ªán responsive"
            ]
        },
        "1.0.0": {
            date: "03/06/2025",
            changes: [
                "Phi√™n b·∫£n ƒë·∫ßu ti√™n",
                "T√≠ch h·ª£p Gemini API",
                "Giao di·ªán chat c∆° b·∫£n",
                "H·ªó tr·ª£ markdown v√† code highlighting"
            ]
        }
    },
    
    // Th√¥ng tin t√°c gi·∫£ v√† d·ª± √°n
    PROJECT_INFO: {
        name: "AI Cute Chatbot",
        author: "Your Name", // Thay ƒë·ªïi t√™n c·ªßa b·∫°n ·ªü ƒë√¢y
        description: "Chatbot th√¥ng minh v·ªõi Gemini API v√† Deep Think",
        repository: "https://github.com/yourusername/ai-cute", // Thay ƒë·ªïi link repo
        website: "https://your-website.com", // Thay ƒë·ªïi website
        license: "MIT"
    },
    
    // C·∫•u h√¨nh ki·ªÉm tra update
    UPDATE_CONFIG: {
        check_interval: 3600000, // 1 hour in milliseconds
        update_url: "https://raw.githubusercontent.com/yourusername/your-repo/main/version.js",
        force_refresh: false // Set true ƒë·ªÉ bu·ªôc refresh cache
    }
};

// H√†m so s√°nh phi√™n b·∫£n
function compareVersions(version1, version2) {
    const v1Parts = version1.split('.').map(Number);
    const v2Parts = version2.split('.').map(Number);
    
    for (let i = 0; i < Math.max(v1Parts.length, v2Parts.length); i++) {
        const v1Part = v1Parts[i] || 0;
        const v2Part = v2Parts[i] || 0;
        
        if (v1Part > v2Part) return 1;
        if (v1Part < v2Part) return -1;
    }
    
    return 0;
}

// H√†m ki·ªÉm tra c√≥ phi√™n b·∫£n m·ªõi kh√¥ng
function hasNewVersion(currentVersion, latestVersion) {
    return compareVersions(latestVersion, currentVersion) > 0;
}

// H√†m l·∫•y changelog c·ªßa phi√™n b·∫£n
function getVersionChangelog(version) {
    return VERSION_INFO.CHANGELOG[version] || null;
}

// H√†m format th·ªùi gian update
function getFormattedUpdateTime() {
    const date = new Date(VERSION_INFO.BUILD_DATE);
    return date.toLocaleString('vi-VN');
}

// H√†m ki·ªÉm tra c·∫≠p nh·∫≠t t·ª´ server
async function checkForUpdates() {
    try {
        const response = await fetch(VERSION_INFO.UPDATE_CONFIG.update_url + '?t=' + Date.now());
        const text = await response.text();
        
        // Parse version t·ª´ response
        const versionMatch = text.match(/VERSION:\s*"([^"]+)"/);
        if (versionMatch) {
            const latestVersion = versionMatch[1];
            return {
                hasUpdate: hasNewVersion(VERSION_INFO.VERSION, latestVersion),
                latestVersion: latestVersion,
                currentVersion: VERSION_INFO.VERSION
            };
        }
    } catch (error) {
        console.warn('Kh√¥ng th·ªÉ ki·ªÉm tra c·∫≠p nh·∫≠t:', error);
    }
    
    return {
        hasUpdate: false,
        latestVersion: VERSION_INFO.VERSION,
        currentVersion: VERSION_INFO.VERSION
    };
}

// H√†m hi·ªÉn th·ªã th√¥ng b√°o c·∫≠p nh·∫≠t
function showUpdateNotification(updateInfo) {
    if (updateInfo.hasUpdate) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(45deg, #4caf50, #45a049);
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            z-index: 10000;
            font-family: Arial, sans-serif;
            cursor: pointer;
            transition: all 0.3s ease;
        `;
        
        notification.innerHTML = `
            <div style="font-weight: bold; margin-bottom: 5px;">üéâ C√≥ phi√™n b·∫£n m·ªõi!</div>
            <div style="font-size: 14px;">v${updateInfo.latestVersion} ƒë√£ c√≥ s·∫µn</div>
            <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">Click ƒë·ªÉ refresh</div>
        `;
        
        notification.onclick = () => {
            location.reload(true);
        };
        
        document.body.appendChild(notification);
        
        // Auto hide after 10 seconds
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 300);
        }, 10000);
    }
}

// Auto check for updates when loaded
if (typeof window !== 'undefined') {
    window.VERSION_INFO = VERSION_INFO;
    window.compareVersions = compareVersions;
    window.hasNewVersion = hasNewVersion;
    window.getVersionChangelog = getVersionChangelog;
    window.checkForUpdates = checkForUpdates;
    window.showUpdateNotification = showUpdateNotification;
    
    // T·ª± ƒë·ªông ki·ªÉm tra c·∫≠p nh·∫≠t sau 5 gi√¢y
    setTimeout(async () => {
        const updateInfo = await checkForUpdates();
        showUpdateNotification(updateInfo);
    }, 5000);
    
    // Ki·ªÉm tra ƒë·ªãnh k·ª≥
    setInterval(async () => {
        const updateInfo = await checkForUpdates();
        showUpdateNotification(updateInfo);
    }, VERSION_INFO.UPDATE_CONFIG.check_interval);
}
